@* 
    BuchVerwaltung – Bücherliste (Index)
    Zeigt alle Bücher mit Paginierung (20 pro Seite), Live-Suche, CRUD über Pop-ups.
*@
@using X.PagedList.Mvc.Core
@using X.PagedList
@model IPagedList<BuchVerwaltung.Models.Book>

@{
    ViewData["Title"] = "Bücherliste";
}

<h1>Bücher</h1>

<!-- Suchfeld: halbe Breite auf mittleren+ Bildschirmen -->
<div class="row mb-3">
    <div class="col-md-6">
        <input type="text" id="searchInput" class="form-control" 
               placeholder="Live-Suche nach Titel oder Autor..." />
    </div>
</div>

<!-- Flex-Container für Button + obere Paginierung - Paginierung jetzt rechts -->
<div class="d-flex align-items-center justify-content-between mb-3">
    <!-- Button: "Neues Buch hinzufügen" – links -->
    <div>
        <button type="button" class="btn btn-success" 
                data-bs-toggle="modal" data-bs-target="#createBookModal">
            Neues Buch hinzufügen
        </button>
    </div>
    
    <!-- Obere Paginierung: RECHTS -->
    <div>
        @Html.PagedListPager((IPagedList)Model, 
            page => Url.Action("Index", new { page, searchString = ViewData["CurrentFilter"] }),
            new PagedListRenderOptions {
                LiElementClasses = new string[] { "page-item" },
                PageClasses = new string[] { "page-link" },
                ContainerDivClasses = new[] { "pagination", "mb-0", "justify-content-end" }
            })
    </div>
</div>

<!-- Tabelle mit Büchern -->
<table id="booksTable" class="table table-striped">
    <thead>
        <tr>
            <th>Titel</th>
            <th>Autor</th>
            <th>ISBN</th>
            <th>Jahr</th>
            <th>Aktionen</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.Author)</td>
                <td>@Html.DisplayFor(modelItem => item.Isbn)</td>
                <td>@Html.DisplayFor(modelItem => item.Year)</td>
                <td>
                    <button type="button" class="btn btn-sm btn-outline-orange" 
                            onclick="loadEditForm(@item.Id)">Bearbeiten</button>
                    <button type="button" class="btn btn-sm btn-outline-info" 
                            onclick="loadDetails(@item.Id)">Details</button>
                    <a href="javascript:void(0)" 
                       onclick="confirmDelete(@item.Id)" 
                       class="btn btn-sm btn-outline-danger">Löschen</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Untere Paginierung: jetzt auch RECHTS -->
<div class="d-flex justify-content-end align-items-center mt-4">
    @Html.PagedListPager((IPagedList)Model, 
        page => Url.Action("Index", new { page, searchString = ViewData["CurrentFilter"] }),
        new PagedListRenderOptions {
            LiElementClasses = new string[] { "page-item" },
            PageClasses = new string[] { "page-link" },
            ContainerDivClasses = new[] { "pagination", "mb-0", "justify-content-end" }
        })
</div>

<!-- Modale: werden per JavaScript befüllt -->
<div class="modal fade" id="createBookModal" tabindex="-1" 
     aria-labelledby="createBookModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createBookModalLabel">Neues Buch hinzufügen</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" 
                        aria-label="Schließen"></button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("_CreateForm", new BuchVerwaltung.Models.Book())
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editBookModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Buch bearbeiten</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" 
                        aria-label="Schließen"></button>
            </div>
            <div class="modal-body" id="editModalBody">
                <!-- Wird per JavaScript befüllt -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="detailsBookModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" id="detailsModalContent">
            <!-- Wird per JavaScript befüllt -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Löschbestätigung
        function confirmDelete(id) {
            if (confirm("Möchtest du dieses Buch wirklich löschen?")) {
                window.location.href = '/Books/DeleteConfirmed/' + id;
            }
        }

        // Erstellen (AJAX)
        function submitCreateForm() {
            const formData = {
                Title: document.querySelector('[name="Title"]').value,
                Author: document.querySelector('[name="Author"]').value,
                Isbn: document.querySelector('[name="Isbn"]').value,
                Year: parseInt(document.querySelector('[name="Year"]').value) || 0
            };

            // Fehlermeldungen leeren
            document.querySelectorAll('.text-danger[id^="error-"]').forEach(el => el.textContent = '');
            const summaryDiv = document.getElementById('createValidationSummary');
            if (summaryDiv) {
                summaryDiv.textContent = '';
                summaryDiv.classList.add('d-none');
            }

            fetch('/Books/CreateAjax', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            })
            .then(response => {
                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('createBookModal')).hide();
                    location.reload();
                } else {
                    return response.json().then(data => {
                        if (data.summary && summaryDiv) {
                            summaryDiv.textContent = data.summary;
                            summaryDiv.classList.remove('d-none');
                        }
                        if (data.fields) {
                            for (let field in data.fields) {
                                const el = document.getElementById('error-' + field);
                                if (el) el.textContent = data.fields[field];
                            }
                        }
                    });
                }
            })
            .catch(err => {
                console.error('Fehler:', err);
                alert('Ein technischer Fehler ist aufgetreten.');
            });
        }

        // Bearbeiten: Formular laden
        function loadEditForm(id) {
            fetch('/Books/EditPartial/' + id)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('editModalBody').innerHTML = html;
                    const modal = new bootstrap.Modal(document.getElementById('editBookModal'));
                    modal.show();
                })
                .catch(err => {
                    alert('Fehler beim Laden des Formulars.');
                });
        }

        // Bearbeiten: Speichern (AJAX)
        function submitEditForm(id) {
            const modal = document.getElementById('editBookModal');
            const title = modal.querySelector('[name="Title"]').value;
            const author = modal.querySelector('[name="Author"]').value;
            const isbn = modal.querySelector('[name="Isbn"]').value;
            const year = parseInt(modal.querySelector('[name="Year"]').value) || 0;

            const formData = {
                Id: id,
                Title: title,
                Author: author,
                Isbn: isbn,
                Year: year
            };

            modal.querySelectorAll('.text-danger[id^="error-"]').forEach(el => el.textContent = '');
            const summaryDiv = document.getElementById('editValidationSummary');
            if (summaryDiv) {
                summaryDiv.textContent = '';
                summaryDiv.classList.add('d-none');
            }

            fetch('/Books/EditAjax', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            })
            .then(response => {
                if (response.ok) {
                    bootstrap.Modal.getInstance(modal).hide();
                    location.reload();
                } else {
                    return response.json().then(data => {
                        if (data.summary && summaryDiv) {
                            summaryDiv.textContent = data.summary;
                            summaryDiv.classList.remove('d-none');
                        }
                        if (data.fields) {
                            for (let field in data.fields) {
                                const errorDiv = modal.querySelector(`#error-${field}`);
                                if (errorDiv) errorDiv.textContent = data.fields[field];
                            }
                        }
                    });
                }
            })
            .catch(err => {
                console.error('Fehler:', err);
                alert('Ein technischer Fehler ist aufgetreten.');
            });
        }

        // Live-Suche mit Debouncing (500ms Pause nach Tippen)
        document.addEventListener('DOMContentLoaded', function () {
            const searchInput = document.getElementById('searchInput');
            let searchTimeout;

            if (searchInput) {
                searchInput.addEventListener('input', function () {
                    const searchTerm = this.value.trim();
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        performSearch(searchTerm);
                    }, 500);
                });
            }
            attachPaginationEvents();
        });

        // Suche per AJAX (serverseitig, inkl. Paginierung)
        function performSearch(searchTerm) {
            const tableBody = document.querySelector('#booksTable tbody');
            if (tableBody) {
                tableBody.innerHTML = '<tr><td colspan="5" class="text-center">Suche läuft...</td></tr>';
            }

            const url = `/Books?searchString=${encodeURIComponent(searchTerm)}&page=1`;
            fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(response => response.ok ? response.text() : Promise.reject('Fehler'))
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newTable = doc.getElementById('booksTable');
                    const newPagination = doc.querySelector('.pagination');

                    if (newTable) document.getElementById('booksTable').outerHTML = newTable.outerHTML;
                    
                    // Update both pagination containers
                    const topPaginationContainer = document.querySelector('.d-flex.justify-content-between.mb-3 > div:last-child');
                    const bottomPaginationContainer = document.querySelector('.d-flex.justify-content-end.align-items-center.mt-4');
                    
                    if (topPaginationContainer && newPagination) {
                        topPaginationContainer.innerHTML = newPagination.outerHTML;
                    }
                    if (bottomPaginationContainer && newPagination) {
                        bottomPaginationContainer.innerHTML = newPagination.outerHTML;
                    }
                    
                    attachPaginationEvents();
                })
                .catch(() => {
                    if (tableBody) tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Fehler bei der Suche</td></tr>';
                });
        }

        // AJAX-Paginierung (für obere + untere Navigation)
        function attachPaginationEvents() {
            document.removeEventListener('click', handlePaginationClick);
            document.addEventListener('click', handlePaginationClick);
        }

        function handlePaginationClick(e) {
            if (e.target.matches('.page-link')) {
                e.preventDefault();
                loadPageViaAjax(e.target.getAttribute('href'));
            }
        }

        function loadPageViaAjax(url) {
            const tableBody = document.querySelector('#booksTable tbody');
            if (tableBody) tableBody.innerHTML = '<tr><td colspan="5" class="text-center">Lade...</td></tr>';

            fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(response => response.ok ? response.text() : Promise.reject())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newTable = doc.getElementById('booksTable');
                    const newPagination = doc.querySelector('.pagination');

                    if (newTable) document.getElementById('booksTable').outerHTML = newTable.outerHTML;
                    
                    // Update both pagination containers
                    const topPaginationContainer = document.querySelector('.d-flex.justify-content-between.mb-3 > div:last-child');
                    const bottomPaginationContainer = document.querySelector('.d-flex.justify-content-end.align-items-center.mt-4');
                    
                    if (topPaginationContainer && newPagination) {
                        topPaginationContainer.innerHTML = newPagination.outerHTML;
                    }
                    if (bottomPaginationContainer && newPagination) {
                        bottomPaginationContainer.innerHTML = newPagination.outerHTML;
                    }
                    
                    attachPaginationEvents();
                })
                .catch(() => {
                    if (tableBody) tableBody.innerHTML = '<tr><td colspan="5" class="text-center text-danger">Fehler beim Laden</td></tr>';
                });
        }

        // Details-Pop-up
        function loadDetails(id) {
            fetch('/Books/DetailsPartial/' + id)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('detailsModalContent').innerHTML = html;
                    new bootstrap.Modal(document.getElementById('detailsBookModal')).show();
                })
                .catch(() => alert('Fehler beim Laden der Details.'));
        }
    </script>
}