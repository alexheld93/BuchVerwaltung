@using X.PagedList.Mvc.Core
@using X.PagedList
@model IPagedList<BuchVerwaltung.Models.Book>

<table id="booksTable" class="table table-striped">
    <thead>
        <tr>
            <th>Titel</th>
            <th>Autor</th>
            <th>ISBN</th>
            <th>Jahr</th>
            <th>Aktionen</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null && Model.Any())
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Title)</td>
                    <td>@Html.DisplayFor(modelItem => item.Author)</td>
                    <td>@Html.DisplayFor(modelItem => item.Isbn)</td>
                    <td>@Html.DisplayFor(modelItem => item.Year)</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-orange" onclick="loadEditForm(@item.Id)">
                            Bearbeiten
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-info" onclick="loadDetails(@item.Id)">
                            Details
                        </button>
                        <a href="javascript:void(0)" onclick="confirmDelete(@item.Id)" class="btn btn-sm btn-outline-danger">Löschen</a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">Keine Bücher gefunden</td>
            </tr>
        }
    </tbody>
</table>

<!-- Paginierung -->
@if (Model != null && Model.PageCount > 1)
{
    <div class="d-flex justify-content-center mt-4">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, searchString = ViewData["CurrentFilter"] }),
            new PagedListRenderOptions {
                LiElementClasses = new string[] { "page-item" },
                PageClasses = new string[] { "page-link" },
                ContainerDivClasses = new[] { "pagination" }
            })
    </div>
}